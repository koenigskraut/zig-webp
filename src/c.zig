const dec = @import("decode.zig");
const enc = @import("encode.zig");

// Decoding
pub extern fn WebPGetDecoderVersion() c_int;
pub extern fn WebPGetInfo(data: [*c]const u8, data_size: usize, width: [*c]c_int, height: [*c]c_int) c_int;
pub extern fn WebPDecodeRGBA(data: [*c]const u8, data_size: usize, width: [*c]c_int, height: [*c]c_int) [*c]u8;
pub extern fn WebPDecodeARGB(data: [*c]const u8, data_size: usize, width: [*c]c_int, height: [*c]c_int) [*c]u8;
pub extern fn WebPDecodeBGRA(data: [*c]const u8, data_size: usize, width: [*c]c_int, height: [*c]c_int) [*c]u8;
pub extern fn WebPDecodeRGB(data: [*c]const u8, data_size: usize, width: [*c]c_int, height: [*c]c_int) [*c]u8;
pub extern fn WebPDecodeBGR(data: [*c]const u8, data_size: usize, width: [*c]c_int, height: [*c]c_int) [*c]u8;
pub extern fn WebPDecodeYUV(data: [*c]const u8, data_size: usize, width: [*c]c_int, height: [*c]c_int, u: [*c][*c]u8, v: [*c][*c]u8, stride: [*c]c_int, uv_stride: [*c]c_int) [*c]u8;
pub extern fn WebPDecodeRGBAInto(data: [*c]const u8, data_size: usize, output_buffer: [*c]u8, output_buffer_size: usize, output_stride: c_int) [*c]u8;
pub extern fn WebPDecodeARGBInto(data: [*c]const u8, data_size: usize, output_buffer: [*c]u8, output_buffer_size: usize, output_stride: c_int) [*c]u8;
pub extern fn WebPDecodeBGRAInto(data: [*c]const u8, data_size: usize, output_buffer: [*c]u8, output_buffer_size: usize, output_stride: c_int) [*c]u8;
pub extern fn WebPDecodeRGBInto(data: [*c]const u8, data_size: usize, output_buffer: [*c]u8, output_buffer_size: usize, output_stride: c_int) [*c]u8;
pub extern fn WebPDecodeBGRInto(data: [*c]const u8, data_size: usize, output_buffer: [*c]u8, output_buffer_size: usize, output_stride: c_int) [*c]u8;
pub extern fn WebPDecodeYUVInto(data: [*c]const u8, data_size: usize, luma: [*c]u8, luma_size: usize, luma_stride: c_int, u: [*c]u8, u_size: usize, u_stride: c_int, v: [*c]u8, v_size: usize, v_stride: c_int) [*c]u8;
pub extern fn WebPInitDecBufferInternal([*c]dec.DecBuffer, c_int) c_int;
pub extern fn WebPFreeDecBuffer(buffer: [*c]dec.DecBuffer) void;
pub extern fn WebPINewDecoder(output_buffer: [*c]dec.DecBuffer) ?*dec.IDecoder;
pub extern fn WebPINewRGB(csp: dec.ColorspaceMode, output_buffer: [*c]u8, output_buffer_size: usize, output_stride: c_int) ?*dec.IDecoder;
pub extern fn WebPINewYUVA(luma: [*c]u8, luma_size: usize, luma_stride: c_int, u: [*c]u8, u_size: usize, u_stride: c_int, v: [*c]u8, v_size: usize, v_stride: c_int, a: [*c]u8, a_size: usize, a_stride: c_int) ?*dec.IDecoder;
pub extern fn WebPINewYUV(luma: [*c]u8, luma_size: usize, luma_stride: c_int, u: [*c]u8, u_size: usize, u_stride: c_int, v: [*c]u8, v_size: usize, v_stride: c_int) ?*dec.IDecoder;
pub extern fn WebPIDelete(idec: ?*dec.IDecoder) void;
pub extern fn WebPIAppend(idec: ?*dec.IDecoder, data: [*c]const u8, data_size: usize) dec.VP8Status;
pub extern fn WebPIUpdate(idec: ?*dec.IDecoder, data: [*c]const u8, data_size: usize) dec.VP8Status;
pub extern fn WebPIDecGetRGB(idec: ?*const dec.IDecoder, last_y: [*c]c_int, width: [*c]c_int, height: [*c]c_int, stride: [*c]c_int) [*c]u8;
pub extern fn WebPIDecGetYUVA(idec: ?*const dec.IDecoder, last_y: [*c]c_int, u: [*c][*c]u8, v: [*c][*c]u8, a: [*c][*c]u8, width: [*c]c_int, height: [*c]c_int, stride: [*c]c_int, uv_stride: [*c]c_int, a_stride: [*c]c_int) [*c]u8;
pub extern fn WebPIDecodedArea(idec: ?*const dec.IDecoder, left: [*c]c_int, top: [*c]c_int, width: [*c]c_int, height: [*c]c_int) [*c]const dec.DecBuffer;
pub extern fn WebPGetFeaturesInternal([*c]const u8, usize, [*c]dec.BitstreamFeatures, c_int) dec.VP8Status;
pub extern fn WebPInitDecoderConfigInternal([*c]dec.DecoderConfig, c_int) c_int;
pub extern fn WebPIDecode(data: [*c]const u8, data_size: usize, config: [*c]dec.DecoderConfig) ?*dec.IDecoder;
pub extern fn WebPDecode(data: [*c]const u8, data_size: usize, config: [*c]dec.DecoderConfig) dec.VP8Status;

// Encoding
pub extern fn WebPGetEncoderVersion() c_int;
pub extern fn WebPEncodeRGB(rgb: [*c]const u8, width: c_int, height: c_int, stride: c_int, quality_factor: f32, output: [*c][*c]u8) usize;
pub extern fn WebPEncodeBGR(bgr: [*c]const u8, width: c_int, height: c_int, stride: c_int, quality_factor: f32, output: [*c][*c]u8) usize;
pub extern fn WebPEncodeRGBA(rgba: [*c]const u8, width: c_int, height: c_int, stride: c_int, quality_factor: f32, output: [*c][*c]u8) usize;
pub extern fn WebPEncodeBGRA(bgra: [*c]const u8, width: c_int, height: c_int, stride: c_int, quality_factor: f32, output: [*c][*c]u8) usize;
pub extern fn WebPEncodeLosslessRGB(rgb: [*c]const u8, width: c_int, height: c_int, stride: c_int, output: [*c][*c]u8) usize;
pub extern fn WebPEncodeLosslessBGR(bgr: [*c]const u8, width: c_int, height: c_int, stride: c_int, output: [*c][*c]u8) usize;
pub extern fn WebPEncodeLosslessRGBA(rgba: [*c]const u8, width: c_int, height: c_int, stride: c_int, output: [*c][*c]u8) usize;
pub extern fn WebPEncodeLosslessBGRA(bgra: [*c]const u8, width: c_int, height: c_int, stride: c_int, output: [*c][*c]u8) usize;
pub extern fn WebPConfigInitInternal([*c]enc.Config, enc.Preset, f32, c_int) c_int;
pub extern fn WebPConfigLosslessPreset(config: [*c]enc.Config, level: c_int) c_int;
pub extern fn WebPValidateConfig(config: [*c]const enc.Config) c_int;
pub extern fn WebPMemoryWriterInit(writer: [*c]enc.MemoryWriter) void;
pub extern fn WebPMemoryWriterClear(writer: [*c]enc.MemoryWriter) void;
pub extern fn WebPMemoryWrite(data: [*c]const u8, data_size: usize, picture: [*c]const enc.Picture) c_int;
pub extern fn WebPPictureInitInternal([*c]enc.Picture, c_int) c_int;
pub extern fn WebPPictureAlloc(picture: [*c]enc.Picture) c_int;
pub extern fn WebPPictureFree(picture: [*c]enc.Picture) void;
pub extern fn WebPPictureCopy(src: [*c]const enc.Picture, dst: [*c]enc.Picture) c_int;
pub extern fn WebPPlaneDistortion(src: [*c]const u8, src_stride: usize, ref: [*c]const u8, ref_stride: usize, width: c_int, height: c_int, x_step: usize, @"type": c_int, distortion: [*c]f32, result: [*c]f32) c_int;
pub extern fn WebPPictureDistortion(src: [*c]const enc.Picture, ref: [*c]const enc.Picture, metric_type: c_int, result: [*c]f32) c_int;
pub extern fn WebPPictureCrop(picture: [*c]enc.Picture, left: c_int, top: c_int, width: c_int, height: c_int) c_int;
pub extern fn WebPPictureView(src: [*c]const enc.Picture, left: c_int, top: c_int, width: c_int, height: c_int, dst: [*c]enc.Picture) c_int;
pub extern fn WebPPictureIsView(picture: [*c]const enc.Picture) c_int;
pub extern fn WebPPictureRescale(picture: [*c]enc.Picture, width: c_int, height: c_int) c_int;
pub extern fn WebPPictureImportRGB(picture: [*c]enc.Picture, rgb: [*c]const u8, rgb_stride: c_int) c_int;
pub extern fn WebPPictureImportRGBA(picture: [*c]enc.Picture, rgba: [*c]const u8, rgba_stride: c_int) c_int;
pub extern fn WebPPictureImportRGBX(picture: [*c]enc.Picture, rgbx: [*c]const u8, rgbx_stride: c_int) c_int;
pub extern fn WebPPictureImportBGR(picture: [*c]enc.Picture, bgr: [*c]const u8, bgr_stride: c_int) c_int;
pub extern fn WebPPictureImportBGRA(picture: [*c]enc.Picture, bgra: [*c]const u8, bgra_stride: c_int) c_int;
pub extern fn WebPPictureImportBGRX(picture: [*c]enc.Picture, bgrx: [*c]const u8, bgrx_stride: c_int) c_int;
pub extern fn WebPPictureARGBToYUVA(picture: [*c]enc.Picture, enc.EncCSP) c_int;
pub extern fn WebPPictureARGBToYUVADithered(picture: [*c]enc.Picture, colorspace: enc.EncCSP, dithering: f32) c_int;
pub extern fn WebPPictureSharpARGBToYUVA(picture: [*c]enc.Picture) c_int;
pub extern fn WebPPictureSmartARGBToYUVA(picture: [*c]enc.Picture) c_int;
pub extern fn WebPPictureYUVAToARGB(picture: [*c]enc.Picture) c_int;
pub extern fn WebPCleanupTransparentArea(picture: [*c]enc.Picture) void;
pub extern fn WebPPictureHasTransparency(picture: [*c]const enc.Picture) c_int;
pub extern fn WebPBlendAlpha(picture: [*c]enc.Picture, background_rgb: u32) void;
pub extern fn WebPEncode(config: [*c]const enc.Config, picture: [*c]enc.Picture) c_int;

// Misc
pub extern fn WebPMalloc(size: usize) ?*anyopaque;
pub extern fn WebPFree(ptr: ?*anyopaque) void;
